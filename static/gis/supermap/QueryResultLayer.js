       // 实现地图查询结果的可视化  --huangqh	var renderer,markerLayer,vectorLayer,select,editEnable = false,tempLayer,queryResultJson;       //发送获取查询结果get请求后的响应处理       function onComplete(text){        	queryResultJson = text;        	initQueryResultLayer();        }      //初始化客户端的矢量图层  vectorLayer		function initVectorLayer() {			renderer = SuperMap.Util.getParameters(window.location.href).renderer;            renderer = (renderer) ? [renderer] : SuperMap.Layer.Vector.prototype.renderers;			var layer_style = SuperMap.Util.extend({}, SuperMap.Feature.Vector.style['default']);            layer_style.fillOpacity = 0.2;           	layer_style.graphicOpacity = 1;			vectorLayer = new SuperMap.Layer.Vector("Vector Layer", {                style: layer_style,                renderers: renderer            });            map.addLayer(vectorLayer);		}		//  在客户端渲染查询结果        function initQueryResultLayer() {         	if(queryResultJson==null){         		return;         	}        	var result = SuperMap.REST.QueryResult.fromJson(JSON.parse(queryResultJson));           // var create = '', create1 = '',create2 = '';            //addBtn(create,clearFeatures);            //addBtn(create1,clearSelectedFeatures);            //addBtn(create2,switchEdit);        	select = new SuperMap.Control.SelectFeature(vectorLayer, {onSelect: onFeatureSelect, onUnselect: onFeatureUnselect});        	map.addControl(select);            var style_green = {                strokeColor: "#00cc00",                strokeWidth: 1,                fillColor: "#66ccff",                strokeDashstyle: "solid",                pointRadius: 6,               	pointerEvents: "visiblePainted"            };            //markerLayer = new SuperMap.Layer.Markers("Markers");            //markerLayer.clearMarkers();            var features=[];            vectorLayer.removeAllFeatures();            if (result && result.recordsets) {            	for (var i=0; i<result.recordsets.length; i++) {                	if (result.recordsets[i].features) {                    	for (var j=0; j<result.recordsets[i].features.length; j++) {                        	var feature = result.recordsets[i].features[j];                        	feature.style = style_green;                        	features.push(feature);                    	}                	}            	}        	}        	vectorLayer.addFeatures(features);        	select.activate();        }        //要素被选中时调用此函数     function onFeatureSelect(feature) {        if(editEnable) {        	editFeatureActive();          editSelectedFeatures();        } else {            var selectedFeature = feature;            var contentHTML = "<div style='font-size:.8em; opacity: 0.8; overflow-y:hidden;'>" +                              "<span style='font-weight: bold; font-size: 14px;'>详细信息:</span><br>"+                              "<table id='featureInfo'><tr> <td valign='top' align='center'>属性</td><td valign='top' align='center'>值</td>";            for(var key in feature.attributes){            	contentHTML +="<tr><td valign='top' align='center'>"+key+"</td><td valign='top' align='center'>"+feature.attributes[key]+"</td><tr>";            }            contentHTML += "</table></div>";            var popup = new SuperMap.Popup.FramedCloud("chicken",                    feature.geometry.getBounds().getCenterLonLat(),                    null,                    contentHTML,                    null,                    true);            feature.popup = popup;            map.addPopup(popup);        }    }    //清除要素时调用此函数    function onFeatureUnselect(feature) {        map.removePopup(feature.popup);        feature.popup.destroy();        feature.popup = null;    }    //编辑选择的要素    function editSelectedFeatures() {        if(vectorLayer.selectedFeatures.length === 1) {            var feature = vectorLayer.selectedFeatures[0];            //popup            if(feature.popup) {                map.removePopup(feature.popup);                feature.popup.destroy();                feature.popup = null;            }            //feature            if(!tempLayer){                return;            }            if(tempLayer.features){                var tempFeature;                for(var id in tempLayer.features) {                    tempFeature  = tempLayer.features[id];                    if(tempFeature.geometry){                        resaveFeature(vectorLayer,tempFeature);                    }                }                tempLayer.removeAllFeatures();            }            //feature            var cloneFeature = feature.clone();            tempLayer.addFeatures(cloneFeature);            //feature            vectorLayer.removeFeatures(feature);        }    }    function resaveFeature(layer,feature){        var cloneFeature = feature.clone();        layer.addFeatures(cloneFeature);    }    //开关编辑功能    function switchEdit(label) {        if(editEnable) {            label.innerHTML = "";            editEnable = false;            editFeatureActive();        }else {            label.innerHTML = "";            editEnable = true;            editFeatureActive();            editSelectedFeatures();        }    }        function editFeatureActive() {        if(editEnable){            if(tempLayer){                return;            }            tempLayer = new SuperMap.Layer.Vector("tempEdit", {renderers: renderer});            map.addLayer(tempLayer);            var drag = new SuperMap.Control.DragFeature(tempLayer);            map.addControl(drag);            drag.activate();            drag.onComplete = function(feature, pixel) {                //feature                resaveFeature(vectorLayer,feature);                drag.outFeature(feature);                tempLayer.removeFeatures(feature);                feature.destroy();            }        }else{            if(!tempLayer){                return;            }            if(tempLayer.features){                var tempFeature;                for(var id in tempLayer.features) {                    tempFeature  = tempLayer.features[id];                    if(tempFeature.geometry){                        resaveFeature(vectorLayer,tempFeature);                    }                }                tempLayer.removeAllFeatures();            }            drag.deactivate();            drag = null;            map.removeLayer(tempLayer,true);            tempLayer.destroy();            tempLayer = null;        }    }    //清除全部要素    function clearFeatures() {        if(vectorLayer.selectedFeatures.length > 0) {            map.removePopup(vectorLayer.selectedFeatures[0].popup);        }        vectorLayer.removeAllFeatures();    }    //清除选择的要素    function clearSelectedFeatures() {        if(vectorLayer.selectedFeatures.length > 0) {            var selectFeatures = vectorLayer.selectedFeatures;            for (var i = 0; i < selectFeatures.length; i ++) {                var feature = selectFeatures[i];                map.removePopup(feature.popup);                feature.popup.destroy();                feature.popup = null;            }            vectorLayer.removeFeatures(vectorLayer.selectedFeatures);        }    }    var JSClient = function(){ 	this.commit = null;	try{	    this.commit = new ActiveXObject("Msxml2.XMLHTTP");	}catch(ex){		try{		    this.commit = new ActiveXObject("Microsoft.XMLHTTP");		}catch(ex){		    this.commit=null;		}    }	if(!this.commit && typeof XMLHttpRequest !== "undefined"){	    this.commit = new XMLHttpRequest();	}	this.sendRequest =  function(url , method ,entry ,onComplete){ 			var xhr = this.commit; 	        xhr.open(method, url, true);            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");            xhr.onreadystatechange = function(){                var readyState = xhr.readyState;                if (readyState === 4){					var responseText =  xhr.responseText ;		            onComplete(responseText);	                xhr.onreadystatechange = function(){};	                xhr = null;	            }            };	        xhr.send(entry);	}};